// Consigna: una oficina postal quiere mejorar la organización de los pedidos y
// envíos diarios. Cada día, recibe una lista, doblemente enlazada, de pedidos
// desde el sistema central de la empresa, que contiene información sobre todos
// los envíos pendientes, con el siguiente formato:
//
// (*) ID_Pedido.
// (*) Estado: "pendiente", "entregado", "devuelto".
// (*) Intentos de entrega: (0..5).
// (*) Fecha_retiro: Fecha (día en el que se debe entregar el pedido).
// (*) Modalidad_envío: "domicilio", "sucursal".
// (*) Prioridad: (1..5).
// (*) Dirección_envío.
// (*) DNI_destinatario.
// (*) Apellidoynombre_destinatario.
//
// La oficina necesita procesar estos pedidos para optimizar las entregas
// diarias. Se le solicita:
// (a) Generar una lista con los pedidos a enviar en el día de hoy, que
//     incluya aquellos pedidos en estado "pendiente" y con modalidad de
//     envío a domicilio, y esté ordenada por el campo de prioridad. El
//     formato debe ser:
//     (*) ID_Pedido.
//     (*) Estado: "pendiente", "entregado", "devuelto".
//     (*) Intentos de entrega: (0..5).
//     (*) Fecha_retiro: Fecha (día en el que se debe entregar el pedido).
//     (*) Modalidad_envío: "domicilio", "sucursal".
//     (*) Dirección_envío.
//     (*) DNI_destinatario.
//     (*) Prioridad: (1..5).
//     (*) Apellidoynombre_destinatario.
//     (*) ID_empleado_asignado.
//     (*) nombre_empleado_asignado.
// (b) Generar una segunda lista de salida, que contenga los pedidos en
//     estado "pendiente" y que se deben retirar hoy de la sucursal, la
//     cual debe estar ordenada por el apellido del destinatario.
// (c) Eliminar de la lista los pedidos que estén en estado "entregado".
// (d) Desarrollar un procedimiento que elimine de la lista de entrada
//     aquellos pedidos que ya fueron regresados al remitente (estado
//     "devuelto"), o que llevan más de 2 intentos sin poder entregarse.
//
// Consideraciones:
// (*) A diferencia de las otras versiones de este enunciado, la lista de
//     entrada no incluye la información de los empleados que entregan los
//     pedidos, así que la voy a pedir por pantalla.
// (*) Para las listas de salida uso el mismo formato, porque la consigna no
//     dice nada acerca del formato que deben tener. Asimismo, como la consigna
//     tampoco dice nada sobre el tipo de lista, voy a crear listas simples de
//     salida.
//     (*) Entiendo que la manera en la que lo realizo yo, usando un solo
//         registro para ambas, debería ser posible.
// (*) Contemplo todos los casos en los que tengo que borrar un elemento con
//     una sola subacción, aún si realmente no es necesario.

Acción Listas5(prim, ult: puntero a Entrada) ES

Ambiente

    Fecha = Registro
        Año: N(4)
        Mes: (1..12)
        Día: (1..31)
    Fin Registro

    Entrada = Registro
        id_env: N(5)
        estado: {"pendiente", "entregado", "devuelto"}
        int_ent: (0..5)
        fecha_retiro: Fecha
        mod_env: {"domicilio", "sucursal"}
        prioridad: (1..5)
        dir_env: AN(100)
        dni_dest: N(8)
        nomap_dest: AN(100)
        ant: puntero a Entrada
        prox: puntero a Entrada
    Fin Registro

    q: puntero a Entrada

    Salida = Registro
        id_env: N(5)
        estado: {"pendiente", "entregado", "devuelto"}
        int_ent: (0..5)
        fecha_retiro: Fecha
        mod_env: {"domicilio", "sucursal"}
        prioridad: (1..5)
        dir_env: AN(100)
        dni_dest: N(8)
        nomap_dest: AN(100)
        id_emp: N(5)
        nomap_emp: AN(100)
        prox: puntero a Salida
    Fin Registro

    prim_env, prim_ret: puntero a Salida
    
    FechaActual: Fecha
    id_empleado: entero
    nomap_empleado: alfanumérico

    Procedimiento Inicializar() ES
        prim_env := NIL
        prim_ret := NIL
        q := prim
    Fin Procedimiento

    Procedimiento ObtenerFechaUsuario() ES
        Escribir("Introduzca el año actual: ")
        Leer(FechaActual.Año)
        Escribir("Introduzca el mes actual: ")
        Leer(FechaActual.Mes)
        Escribir("Introduzca el día actual: ")
        Leer(FechaActual.Día)
    Fin Procedimiento
    
    Procedimiento ObtenerDatosEmpleado() ES
        Escribir("Introduzca la ID del empleado asignado al pedido: ")
        Leer(id_empleado)
        Escribir("Introduzca el nombre del empleado asignado al pedido: ")
        Leer(nomap_empleado)
    Fin Procedimiento

    Procedimiento EliminarPuntero() ES
    Ambiente
        borrar: puntero a Entrada
    Proceso
        Si prim = ult Entonces
           // Hay un solo elemento en la lista.
           prim := NIL
           ult := prim
        Contrario
            Si q = prim Entonces
                // Tengo que borrar el primer elemento de la lista.
                prim := *q.prox
                *(*q.prox).ant := NIL
            Contrario
                Si q = ult Entonces
                    // Tengo que borrar el último elemento.
                    ult := *q.ant
                    *(*q.ant).prox := NIL
                Contrario
                    // Tengo que borrar un elemento intermedio.
                    *(*q.ant).prox := *q.prox
                    *(*q.prox).ant := *q.ant
                Fin Si
            Fin Si
        Fin Si

        borrar := q
        q := *q.prox
        Disponer(borrar)
    Fin Procedimiento

    Procedimiento CargarLista(ent: puntero a Entrada, prim_list: puntero a Salida, tipo_lista: entero) ES
    Ambiente
        r, p, aux: puntero a Salida
    Proceso
        Nuevo(p)
        *p.id_env := *ent.id_env
        *p.estado := *ent.estado
        *p.int_ent := *ent.int_ent
        *p.fecha_retiro := *ent.fecha_retiro
        *p.mod_env := *ent.mod_env
        *p.prioridad := *ent.prioridad
        *p.dir_env := *ent.dir_env
        *p.dni_dest := *ent.dni_dest
        *p.nomap_dest := *ent.nomap_dest
        *p.id_emp := id_emp
        *p.nomap_emp := nomap_emp
        *p.prox := NIL

        r := prim_list
        aux := NIL

        Si tipo_lista = 1 Entonces
            // Si tipo_lista = 1, estoy cargando la lista del primer
            // punto, que debe estar ordenada por prioridad.
            Mientras r <> NIL y *r.prioridad < *p.prioridad Hacer
                aux := r
                r := *r.prox
            Fin Mientras
        Contrario
            // Si tipo_lista = 2, estoy cargando la lista del segundo
            // punto, que debe estar ordenada por nombre y apellido
            // del destinatario.
            Mientras r <> NIL y *r.nomap_dest < *p.nomap_dest Hacer
                aux := r
                r := *r.prox
            Fin Mientras
        Fin Si

        Si aux = NIL Entonces
            *p.prox := prim_list
            prim_list := p
        Contrario
            *aux.prox := p
            *p.prox := r
        Fin Si
    Fin Procedimiento

Proceso

    Inicializar()
    ObtenerFechaUsuario()

    Mientras q <> NIL Hacer        
        Si *q.estado = "pendiente" y *q.int_ent <= 2 Entonces
            ObtenerDatosEmpleado()
            
            Si *q.mod_env = "domicilio" Entonces
                CargarLista(q, prim_env, 1)
            Contrario
                Si *q.mod_env = "sucursal" y *q.fecha_retiro = FechaActual Entonces
                    CargarLista(q, prim_ret, 2)
                Fin Si
            Fin Si

            q := *q.prox
        Contrario
            EliminarPuntero()
        Fin Si
    Fin Mientras

Fin Acción
