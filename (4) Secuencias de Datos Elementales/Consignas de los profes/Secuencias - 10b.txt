// Consigna de los profes: Un local de comidas posee información de las facturas
// emitidas en dos secuencias de caracteres. Desarrolle un algoritmo que procese
// ambas secuencias para crear una nueva secuencia que combine la información de
// las facturas y los detalles de forma alternada según se indique.
//
// Formato de la secuencia de facturas:
// * CódigoFactura: 5 dígitos numéricos.
// * FechaEmisión: 8 caracteres en formato aaaammdd.
// * TipoFactura: “A”, “B”, o “C”.
// * Nombre o razón social del cliente: cantidad indefinida de caracteres hasta la marca "#".
// * CUIT/CUIL: 11 caracteres numéricos.
//
// Estilo de la secuencia de facturas:
// CódigoFacturaFechaEmisiónTipoFacturaNombre#CUIT
//
// Ejemplo de la secuencia de facturas:
// |5|5|4|6|7|2|0|2|4|0|3|2|1|A|J|u|a|n|P|e|r|e|z|#|2|7|3|2|7|8|3|1|2|3|4|4|7|8|5|6|2|0|2|4|0|4|0|1|B|J|u|a|n|a|P|e|r|e|z|#|2|7|4|1|5|8|3|1|2|3|3|
//
// Formato de la secuencia con detalle de las facturas:
// * CódigoProducto: 6 caracteres alfanuméricos.
// * Descripción: caracteres alfanuméricos indefinidos.
// * Cantidad: un dígito del 1 al 9.
// * PrecioUnitario: 3 dígitos numéricos (es siempre un valor entero). 
// * Termina el detalle de una factura en “!”.
// * Una misma factura puede tener mas de una linea de detalle.
//
// Estilo de la secuencia con detalle de facturas:
// CódigoProductoDescripciónCantidadPrecioUnitario!
//
// Ejemplo de la secuencia con detalle de facturas:
// |A|1|B|2|4|B|J|u|g|o|N|a|r|a|n|j|a|2|0|8|0|A|A|5|5|4|B|M|e|d|i|a|l|u|n|a|s|6|1|2|0|!|B|2|1|B|2|4|C|e|r|e|a|l|5|1|2|5|!|
//
// Se pide:
// (a) Secuencia de salida de enteros y monto total de todas las facturas tipo A.
// (b) Porcentaje de facturas tipo A emitidas.

Acción Secuencias10 ES

Ambiente

	sec_fac, sec_det: secuencia de carácter
	v_fac, v_det: carácter
	
	sec_sal: secuencia de entero
	v_sal, cant_facturas, cant_facturas_a, cant_art, monto_art, monto_total, i: entero
	porc_fact_a: real
	es_tipo_a: lógico

	números = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
	
	Procedimiento Inicializar() ES
		cant_facturas := 0
		cant_facturas_a := 0
		monto_art := 0
		monto_total := 0
	Fin Procedimiento
	
	Función CharToInt(entrada: carácter): entero ES
		Según entrada Hacer
			= "1": CharToInt := 1
			= "2": CharToInt := 2
			= "3": CharToInt := 3
			= "4": CharToInt := 4
			= "5": CharToInt := 5
			= "6": CharToInt := 6
			= "7": CharToInt := 7
			= "8": CharToInt := 8
			= "9": CharToInt := 9
		Fin Según
	Fin Función

Proceso

	ARR(sec_fac)
	AVZ(sec_fac, v_fac)
	ARR(sec_det)
	AVZ(sec_det, v_det)
	CREAR(sec_sal)
	
	Inicializar()

	Mientras NFDS(sec_fac) Hacer
		// Cuento la cantidad de facturas.
		cant_facturas := cant_facturas + 1
		
		// Avanzo los datos innecesarios.
		Para i := 1 hasta 13 Hacer
			AVZ(sec_fac, v_fac)
		Fin Para
		
		// Si la factura es del tipo A,
		// hago lo que corresponde.
		Si v_fac = "A" Entonces
			es_tipo_a := V
			cant_facturas_a := cant_facturas_a + 1
		Contrario
			es_tipo_a := F
		Fin Si
		
		// El resto de los datos de la 
		// factura no me importan.
		Mientras v_fac <> "#" Hacer
			AVZ(sec_fac, v_fac)
		Fin Mientras
		
		Para i := 1 hasta 12 Hacer
			AVZ(sec_fac, v_fac)
		Fin Para
		
		// Proceso la secuencia con los detalles.
		Mientras v_det <> "!" Hacer
			// Salto los datos que no me importan.
			Para i := 1 hasta 6 Hacer
				AVZ(sec_det, v_det)
			Fin Para
			
			Mientras v_det NO en números Hacer
				AVZ(sec_det, v_det)
			Fin Mientras

			Si es_tipo_a Entonces
				// Resguardo la cantidad comprada
				// de artículos.
				cant_art := CharToInt(v_det)
				AVZ(sec_det, v_det)
			
				// Estoy parado en el precio de un artículo.
				monto_art := monto_art + CharToInt(v_det) * 100
				AVZ(sec_det, v_det)
				
				monto_art := monto_art + CharToInt(v_det) * 10
				AVZ(sec_det, v_det)
				
				monto_art := monto_art + CharToInt(v_det) * 1
				AVZ(sec_det, v_det)
			Contrario
				Para i := 1 hasta 3 Hacer
					AVZ(sec_det, v_det)
				Fin Para
			Fin Si
			
			// Si estoy parado en "!", ya llegué al final
			// de la factura. Sino, tengo más detalles de
			// la factura que cubrir.
			// Si ya terminó la factura, esto funciona igual.
			monto_total := monto_total + (monto_art * cant_art)
		Fin Mientras
		
		// Cuando estoy acá, ya llegué al fin del
		// detalle de la factura actual, porque la
		// ventana es igual a "!". Grabo en la
		// salida y reseteo los valores necesarios 
		// para la siguiente factura tipo A que
		// encuentre.
		GRABAR(sec_sal, monto_total)
		monto_art := 0
		monto_total := 0
		
		// Avanzo la secuencia de detalles.
		// La otra no porque ya quedé parado en
		// el primer carácter de la siguiente
		// tras avanzar el CUIT/CUIL.
		AVZ(sec_det, v_det)
	Fin Mientras
	
	porc_fac_a := (cant_facturas_a * 100) / cant_facturas
	
	Escribir("Las facturas de tipo A conforman el" porc_fac_a "% de las facturas.")

	CERRAR(sec_fac)
	CERRAR(sec_det)
	CERRAR(sec_sal)

Fin Acción
