// Consigna: Taylor Swift trajo The Eras Tour a Latinoamérica y pasó por Buenos Aires
// el 9, 10 y 11 de noviembre. Una gran cantidad de swifties hicieron fila en la entrada
// del estadio por 7 meses para asegurar un lugar cercano a la artista dentro del estadio.
//
// La comunidad de "Swifties Developers" desarrolló un sistema para enumerar los lugares
// en la fila, y posteriormente acceder de manera ordenada al estadio. Como tuvo tanto
// éxito, se quiere digitalizar dicho sistema para próximos recitales con tanta
// concurrencia. Se cuenta con la siguiente información:
//
// Una lista simple que contiene: DNI de la swiftie, número de la fila, fecha en la
// que se puso a hacer la fila y fecha para la que tiene entradas. Se decidió encriptar
// el número en la fila que le toca a cada una, código que, el día del recital, será
// desencriptado para poder acceder al estadio. Para el proceso de encriptación se debe
// realizar lo siguiente:
//
// 1. Recuperar el código de encriptación que se encuentra en una matriz de enteros,
//    cuyas dimensiones son el mes en el que inició la fila y el día para el que tiene
//    entradas.
// 2. Obtener el código de swiftie, para lo cual existe una función swiftieEncriptada(),
//    que retorna dicho código y recibe como parámetro el número de fila y el código
//    correspondiente de la matriz.
//
// Se pide:
// (a) Cargar una lista doble que deberá tener un nodo por cada fecha del recital, en
//     los cuales se registre la cantidad de asistentes, seguido por nodos con la
//     información de las swifties que van en cada fecha (código y DNI).
//     (*) Los nodos que indican la fecha y cantidad de asistentes deben tener los
//         campos código y DNI vacíos. Luego, los nodos con información de cada
//         swiftie indican el código encriptado y el DNI, dejando vacíos los campos
//         de fecha y cantidad. Una vez que se cargó a la swiftie en la lista doble,
//         se la debe eliminar de la lista de entrada.
// (b) Informar la fecha con la mayor cantidad de swifties.
//
// Ejemplo de la lista doble:
// |-----------|       |------------------|       |------------|       |------------------|       |------------|       |------------------|
// |fecha: 9/11|       |fecha:            |       |fecha: 10/11|       |fecha:            |       |fecha: 11/11|       |fecha:            |
// |cant: 45633| ----> |cant:             | ----> |cant: 45633 | ----> |cant:             | ----> |cant: 45633 | ----> |cant:             |
// |cod:       | <---- |cod:a#14s/54d(aa4d| <---- |cod:        | <---- |cod:a#14s/54d(aa4d| <---- |cod:        | <---- |cod:a#14s/54d(aa4d|
// |dni:       |       |dni: 11222666     |       |dni:        |       |dni: 11222666     |       |dni:        |       |dni: 11222666     |
// |-----------|       |------------------|       |------------|       |------------------|       |------------|       |------------------|

Acción ListasM2(prim: puntero a Swiftie, cod_enc: arreglo de [1..12, 1..3] de entero) ES

Ambiente

    Fecha = Registro
        año: N(4)
        mes: (1..12)
        día: (1..31)
    Fin Registro

    Swiftie = Registro
        dni: N(8)
        num_fila: N(3)
        fecha_fila: Fecha
        fecha_entradas: Fecha
        prox: puntero a Swiftie
    Fin Registro

    q, borrar: puntero a Swiftie

    Salida = Registro
        fecha_rec: Fecha
        cantidad: N(3)
        código: AN(20)
        dni: N(8)
        ant: puntero a Salida
        prox: puntero a Salida
    Fin Registro

    prim_sal, ult_sal, aux_sal, p, r: puntero a Salida
    i, mayor_swifties, día_mayor_swifties: entero

    Procedimiento Inicializar() ES
        prim_sal := NIL
        ult_sal := NIL
        aux_sal := NIL
        mayor_swifties := LV
    Fin Procedimiento

Proceso

    Inicializar()

    // Cargo los nodos con las fechas.
    Para i := 9 hasta 11 Hacer
        Nuevo(p)
        *p.fecha_rec.año := 2023
        *p.fecha_rec.mes := 11
        *p.fecha_rec.día := i
        *p.cantidad := 0
        *p.código := " "
        *p.dni := 0
        *p.ant := NIL
        *p.prox := NIL
        
        Si prim_sal = NIL Entonces
            prim_sal := p
        Contrario
            *aux_sal.prox := p
            *p.ant := aux_sal
        Fin Si

        ult_sal := p
        aux_sal := p
    Fin Para

    // Hay que procesar la lista de entrada.
    q := prim
    
    Mientras q <> NIL Hacer
        r := prim_sal
        
        // Esto funciona porque el primer nodo para una fecha dada siempre va
        // a ser el nodo correspondiente a la cantidad de asistentes al recital.
        Mientras *r.prox <> NIL y *r.fecha_rec.día <> *q.fecha_entradas.día Hacer
            aux_sal := r
            r := *r.prox
        Fin Mientras
        
        Si *r.fecha_rec.día <> *q.fecha_entradas.día Entonces
            // Esto no debería pasar... pero bueno.
            Escribir("ERROR. No se pudo encontrar la fecha especificada en la entrada.")
        Contrario
            // Voy a insertar siempre después del nodo de cabecera, empujando
            // los nodos de switfies ya existentes hacia adelante, puesto que
            // la consigna no aclara que deba estar ordenada la lista.
            Nuevo(p)
            *p.fecha_rec.año := 0
            *p.fecha_rec.mes := 0
            *p.fecha_rec.día := 0
            *p.cantidad := 0
            *p.código := swiftieEncriptada(*q.num_fila, cod_enc[*q.fecha_fila.mes, *q.fecha_entradas.día])
            *p.dni := *q.dni
            *p.ant := r
            *p.prox := *r.prox
            *r.prox := p
            *r.cantidad := *r.cantidad + 1
            
            Si *p.prox = NIL Entonces
                // Estoy cargando un elemento que va a ser el nuevo
                // último elemento de la lista.
                //
                // Esto solo pasaría, a priori, si estoy cargando el
                // nodo correspondiente a la primer swiftie con entradas
                // para el 11/11.
                ult_sal := p
            Contrario
                *(*p.prox).ant := p
            Fin Si
        Fin Si
        
        // Una vez tratada la entrada, hay que borrarla.
        borrar := q
        q := *q.prox
        Disponer(borrar)
    Fin Mientras

    // Ahora toca determinar la fecha con la mayor cantidad de asistentes.
    Para i := 9 hasta 11 Hacer
        r := prim_sal
        
        // Misma lógica que con la carga de la lista doble.
        Mientras *r.prox <> NIL y *r.fecha_rec.día <> i Hacer
            r := *r.prox
        Fin Mientras
        
        Si *r.fecha_rec.día <> i Entonces
            // Esto tampoco debería pasar, llegar al final de la lista y no encontrar
            // la fecha deseada.
            Escribir("ERROR. No se pudo encontrar la fecha de recital solicitada.")
        Contrario
            // Se encontró el nodo correspondiente a la fecha del recital.
            Si *r.cantidad > mayor_swifties Entonces
                mayor_swifties := *r.cantidad
                día_mayor_swifties := *r.fecha_rec.día
            Fin Si
        Fin Si
    Fin Para

    Escribir("El recital con la mayor asistencia de swifties fue el recital del día" día_mayor_swifties ".")

Fin Acción
