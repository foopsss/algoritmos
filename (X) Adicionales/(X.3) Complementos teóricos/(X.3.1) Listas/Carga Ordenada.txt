// La carga ordenada implica buscar la posición en la cual se debe insertar el
// nuevo elemento. Los datos de la lista sobre la cual se debe trabajar se
// recuperan a través del puntero externo (cabecera), según el orden que se
// haya establecido.
//
// En este proceso deben contemplarse varias situaciones:
// (1) Que la lista esté vacía.
// (2) Que el nuevo elemento deba insertarse previo al primer nodo (es
//     decir, que sea el nuevo primer elemento).
// (3) Que el nuevo elemento deba insertarse después del último nodo (es
//     decir, que sea el nuevo último elemento).
// (4) Que el nuevo elemento deba insertarse en medio de la lista (posición
//     intermedia).
//
// El algoritmo generalizado utiliza una búsqueda lineal con centinela para
// buscar un elemento en la lista, que se trata del ciclo Mientras dentro
// del algoritmo.
//
// |---------------------------------------------------------------------|
// |                           TABLA DE ACCIONES                         |
// |---------------------------------------------------------------------|
// | Caso               | Condición   | Acciones                         |
// |---------------------------------------------------------------------|
// | Lista vacía        | prim = NIL  | *p.prox := NIL                   |
// |                    | aux = NIL   | prim := p                        |
// |---------------------------------------------------------------------|
// | Primer elemento    | prim = NIL  | *p.prox := q (o *p.prox := prim) |
// |                    | aux = NIL   | prim := p                        |
// |---------------------------------------------------------------------|
// | Elemento del medio | prim <> NIL | *p.prox := q                     |
// |                    | aux <> NIL  | *a.prox := p                     |
// |---------------------------------------------------------------------|
// | Último elemento    | aux <> NIL  | *p.prox := q (NIL)               |
// |                    | q = NIL     | *a.prox := p                     |
// |---------------------------------------------------------------------|

Acción CargaOrdenada ES

Ambiente

    Nodo = Registro
        Dato: N(2)
        prox: puntero a Nodo
    Fin Registro

    // Mi puntero de cabecera es prim.
    prim, p, q, aux: puntero a Nodo
    valor: entero

    Procedimiento Inicializar() ES
        // Esto solo se verifica para el primer caso.
        // En los demás casos, se debe verificar siempre
        // que prim <> NIL.
        prim := NIL
        
        // Esto solo se verifica para los dos primeros
        // casos, cuando la lista está vacía y cuando
        // hay que insertar algo previo al primer
        // elemento.
        aux := NIL
    Fin Procedimiento

    Procedimiento PedirValor() ES
        Escribir("Ingrese un valor: ")
        Leer(valor)
    Fin Procedimiento

Proceso

    PedirValor()
    Inicializar()

    Mientras valor <> tope Hacer        
        Nuevo(p)
        *p.Dato := valor
        
        // Utilizo q como una suerte de "ventana", para enlazar
        // al primer elemento de la lista que voy a trabajar.
        //
        // Si prim = NIL, es porque mi lista está vacía.
        q := prim
        
        Mientras q <> NIL y *q.Dato < valor Hacer
            // Resguardo el puntero actual en mi auxiliar
            // y avanzo hacia el siguiente.
            aux := q
            q := *q.prox
        Fin Mientras
        
        Si aux = NIL Entonces
            // Si mi auxiliar es igual a NIL, es porque no resguardé
            // ningún puntero, lo que implica que la lista estaba vacía.
            //
            // De esta forma, no existe nada después del primer
            // elemento, que acabo de crear, y hago que mi puntero
            // de cabecera enlace al puntero recién creado.
            *p.prox := prim
            prim := p
        Contrario
            // Si mi auxiliar es distinto de NIL, es porque lo estoy
            // usando para resguardar el puntero anterior al puntero
            // que tengo en q.
            // 
            // Esto implica que cubro las siguientes situaciones:
            // (2) Inserción previo al primer nodo.
            // (3) Inserción después del último nodo.
            // (4) Inserción en el medio de la lista.
            *p.prox := q
            *aux.prox := p
        Fin Si
        
        PedirValor()
    Fin Mientras

Fin Acción
